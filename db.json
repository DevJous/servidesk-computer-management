{
  "articles": [
    {
      "id": "1",
      "slug": "use-your-desires-as-a-muse",
      "author": "Jose Sanchez",
      "date": "2022-04-14",
      "title": "Use your desires as a muse",
      "description": "What motivates us to get out of bed? What motivates us to work? What inspires us to do the things that we set out to do? Have you ever wondered what inspires you? In Greek mythology, the muses are, according to the oldest writers, the inspiring divinities of the arts.",
      "content": "![UYDASM](https://www.joseschz.com/_next/image?url=https%3A%2F%2Fres.cloudinary.com%2Fjoseschzslts%2Fimage%2Fupload%2Fv1649741810%2FIMG_4386_66670940bd.jpg&w=3840&q=75 \"UYDASM\")\n\nWhat motivates us to get out of bed? What motivates us to work? What inspires us to do the things that we set out to do?\n\nHave you ever wondered what inspires you?\n\nIn Greek mythology, the muses are, according to the oldest writers, the inspiring divinities of the arts.\n\n**That inspiration that the artist feels and that stimulates or favors the creation or composition of works of art… personally can be anything, not just a person.**\n\nBut when the muse dies, happiness and inspiration die, that is something that has happened to everyone at some point.\n\nSomething that I recommend is to use our desires as a muse, since personifying our muse will always have the risk that that person moves away from us, and our inspiration with it.\n\n**But how can we use our desires as a muse?**\n\nThe more we develop as a person, we realize that life is not so simple, but is that muse that helps us to be a better version and make get out our inner artist, considering prosperity for the future.\n\n**A house, a nice car, a full life without problems, or having the affection of that person we idealize so much, are typical wishes that we don’t get that easy and have crossed the mind of more than one, however, I think they should not be a reason for unhappiness. for us.**\n\nFinding something that inspires us in our environment can be easy, but it can also be complicated and frustrating, as many of us are just slaves of our environment.\n\nHaving money or our image as a muse is valid but is that kind of inspiration worth it? depending on the person who reads this, say yes, or not, personally, my muse is just to be remembered, as a good person of course.\n\nThe meaning of Memento mori is that it reminds us that we are going to die, many people take this as an impulse to not leave anything adrift and take charge of their lives.\n\nMemento mori reminds us that we will only walk this way once, so let us make our footprints be remembered, and try to not be on murmuring lips.\n\n> But be aware of your desires just like a chess game each action opens\n> a bunch of ways, but with only one outcome at the end.\n\nFighting for those wishes to come true is essential for us, let us not wait for fate to grant us those wishes. Fate owes us nothing and we are not going to owe it anything.\n\nWe are the ones who shape our destiny, so if you really want those wishes to come true, start by looking around you and notice those details that do not let you move forward.\n\nWhy you are not where you want to be and what you can do to fix it, be self-critical with yourself, try to get out of the hole, and reinvent yourself as a person.\n\nOne of my greatest wishes in this life is to be remembered as a successful person, which is what everyone wants, right? The question is, how do we do it? Where do we start? These are questions I constantly ask myself.\n\n**However, if I look back and see how I have progressed when compared to myself, I feel proud of what I have learned and where I am going.**\n\nTherefore, I think that if our muse is strong, and in a certain aspect we are ambitious with our future, this will take us far."
    },
    {
      "id": "2",
      "slug": "how-to-create-a-contact-form-in-nextjs-typescript-and-sendgrid",
      "author": "Jose Sanchez",
      "date": "2022-04-14",
      "title": "How to create a contact form in nextjs typescript and sendgrid",
      "description": "What motivates us to get out of bed? What motivates us to work? What inspires us to do the things that we set out to do? Have you ever wondered what inspires you? In Greek mythology, the muses are, according to the oldest writers, the inspiring divinities of the arts.",
      "content": "\n**You can use SendGrid to create a contact form in Nextjs.**\n\nSendGrid is an email service that offers an API to send and receive emails.\n\nTo set up SendGrid, you first need to create an account on their website. Once the account is created, we will need to configure the SendGrid API in your Nextjs application.\n\nFirst, we are going to create the components that we will need for the form, and we are also going to validate the inputs of the inputs.\n\n## **Step 1 — Create input validations**\n\nThis code is a function that takes in three parameters, name, email, and message. It then checks to see if there are any errors with these fields. If there are, it will return an error message.\n\nThe function starts by creating an empty object, errors. It then checks if the name field is empty or if it only contains whitespace characters. If so, it will add an error message to the errors object.\n\nIt then does the same for the email and message fields. However, the email field also checks if the email is in a valid format. If it is not, it will add an error message to the errors object.\n\nFinally, the function returns the errors object.\n\nOpen  `validate.ts`  and add the following code.\n\n```typescript\n// utils/validate.ts\nexport const validate = ({\n  name,\n  email,\n  message,\n}: {\n  name: string;\n  email: string;\n  message: string;\n}) => {\n  const errors: { name?: string; email?: string; message?: string } = {};\n  if (!name || name.trim() === \"\") {\n    errors.name = \"Name is required\";\n  }\n  if (!email || email.trim() === \"\") {\n    errors.email = \"Email is required\";\n  } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(email)) {\n    errors.email = \"Invalid email address\";\n  }\n  if (!message || message.trim() === \"\") {\n    errors.message = \"Message is required\";\n  }\n  return errors;\n};\n```\n\n----------\n\n## **Step 2 — Create the Input component.**\n\nThis code defines an interface for an input element, which includes the id, name, label, and placeholder attributes, as well as an error flag and error message. The Input component renders a div with a label, input element, and optional error message. The ...props spread operator allows additional attributes to be passed to the input element.\n\nOpen  `Input.tsx`  and add the following code.\n\n```typescript\n// components/contactForm/Input.tsx\ninterface InputProps extends React.InputHTMLAttributes<HTMLInputElement> {\n  id: string;\n  name: string;\n  label: string;\n  placeholder: string;\n  error?: boolean;\n  errorMessage?: string;\n}\nconst Input = ({\n  id,\n  name,\n  label,\n  placeholder,\n  error = false,\n  errorMessage = \"\",\n  ...props\n}: InputProps) => {\n  return (\n    <div className=\"mt-4 block\">\n      <label className=\"mb-3 block\" htmlFor={id}>\n        {label}\n      </label>\n      <input\n        {...props}\n        type=\"text\"\n        id={id}\n        name={name}\n        placeholder={placeholder}\n        className=\"block w-full rounded-md border-gray-400 py-3 pl-7 pr-12 focus:border-gray-500 sm:text-sm\"\n      />\n      {error && <p className=\"mt-2 text-sm text-pink-600\">*{errorMessage}</p>}\n    </div>\n  );\n};\nexport default Input;\n```\n\n----------\n\n## **Step 3 — Create the Text Area component.**\n\nThis code defines a functional component for a text area input element. The component accepts various props, including an id, name, label, placeholder, type, error, and errorMessage prop. The component renders a div element with a label and a textArea element. If the error prop is true, then a p element with an error message is rendered.\n\nOpen  `TextArea.tsx`  and add the following code.\n\n```typescript\n// components/contactForm/TextArea.tsx\ninterface TextAreaProps extends React.InputHTMLAttributes<HTMLTextAreaElement> {\n  id: string;\n  name: string;\n  label: string;\n  placeholder: string;\n  type?: string;\n  error?: boolean;\n  errorMessage?: string;\n}\nconst TextArea = ({\n  id,\n  name,\n  label,\n  placeholder,\n  error,\n  errorMessage,\n  ...props\n}: TextAreaProps) => {\n  return (\n    <div className=\"mt-4 block\">\n      <label className=\"mb-3 block\" htmlFor={id}>\n        {label}\n      </label>\n      <textarea\n        {...props}\n        id={id}\n        name={name}\n        rows={5}\n        placeholder={placeholder}\n        className=\"block w-full resize-none rounded-md border border-gray-400 pl-7 pr-12 shadow-sm focus:border-gray-500 sm:text-sm\"\n      ></textarea>\n      {error && <p className=\"mt-2 text-sm text-pink-600\">*{errorMessage}</p>}\n    </div>\n  );\n};\nexport default TextArea;\n```\n\n----------\n\n## **Step 4 — Create API mail.**\n\nThis code is a handler for an API request. It checks the request method, and if it is a POST request, it gets the name, email, and message from the request body. It then creates a new message with this information and sends it using the SendGrid API. If there is an error, it returns a status code of 500 and a JSON object with an error message.\n\nInside  `pages/api`  folder, we create  `mail.ts`  and add the following code.\n\n```typescript\n// pages/api/mail.ts\nimport type { NextApiRequest, NextApiResponse } from \"next\";\nconst sgMail = require(\"@sendgrid/mail\");\nsgMail.setApiKey(process.env.SENDGRID_API_KEY);\ntype Data = {\n  message: string;\n};\nexport default async function handler(\n  req: NextApiRequest,\n  res: NextApiResponse<Data>\n) {\n  if (req.method === \"POST\") {\n    const {\n      name,\n      email,\n      message,\n    }: { name: string; email: string; message: string } = req.body;\n    const msg = `Name: ${name}\\r\\n Email: ${email}\\r\\n Message: ${message}`;\n    const data = {\n      to: \"youremail@gmail.com\",\n      from: \"yoursendgridemail@test.com\",\n      subject: `${name.toUpperCase()} sent you a message from Contact Form`,\n      text: `Email => ${email}`,\n      html: msg.replace(/\\r\\n/g, \"<br>\"),\n    };\n    try {\n      await sgMail.send(data);\n      res.status(200).json({ message: \"Your message was sent successfully.\" });\n    } catch (err) {\n      res\n        .status(500)\n        .json({ message: `There was an error sending your message. ${err}` });\n    }\n  }\n}\n```\n\n----------\n\n## **Step 5 — Add to Environment**\n\nCreate a file named  **.env**  at the root of your project. And add the following code there. This can also be done directly into the code, but environment variables are better.\n\n`SENDGRID_API_KEY=”YOUR API KEY HERE”`\n\n----------\n\n## **Step 6 — Create the Form component.**\n\nThis code is a form that uses the React Hooks useState and useEffect. It also uses the Axios library to make a POST request to an API. The form has inputs for name, email, and message. When the form is submitted, the data from the inputs is sent to the API. If the API returns a success status, the form is reset, and a success message is displayed. If the API returns an error, the form is not reset, and an error message is displayed.\n\n```typescript\n// components/contactForm/Form.tsx\nimport axios from \"axios\";\nimport { useState } from \"react\";\nimport { RiLoader5Fill } from \"react-icons/ri\";\nimport { validate } from \"../../utils/validate\";\nimport Input from \"./Input\";\nimport TextArea from \"./TextArea\";\ninterface IValues {\n  name: string;\n  email: string;\n  message: string;\n}\ninterface IErrors extends Partial<IValues> {}\nexport const Form = () => {\n  const [values, setValues] = useState({\n    name: \"\",\n    email: \"\",\n    message: \"\",\n  });\n  const [errors, setErrors] = useState<IErrors>({});\n  const [loading, setLoading] = useState(false);\n  const [success, setSuccess] = useState(false);\n  const [messageState, setMessageState] = useState(\"\");\n  const handleSubmit = async (e: React.FormEvent<HTMLFormElement>) => {\n    e.preventDefault();\n    const errors = validate(values);\n    if (errors && Object.keys(errors).length > 0) {\n      return setErrors(errors);\n    }\n    setErrors({});\n    setLoading(true);\n    axios\n      .post(\"/api/mail\", {\n        name: values.name,\n        email: values.email,\n        message: values.message,\n      })\n      .then((res) => {\n        if (res.status === 200) {\n          setValues({ name: \"\", email: \"\", message: \"\" });\n          setLoading(false);\n          setSuccess(true);\n          setMessageState(res.data.message);\n        } else {\n          setLoading(false);\n          setMessageState(res.data.message);\n        }\n      })\n      .catch((err) => {\n        setLoading(false);\n        setMessageState(String(err.message));\n      });\n    setLoading(false);\n  };\n  const handleChange = (\n    e:\n      | React.ChangeEvent<HTMLInputElement>\n      | React.ChangeEvent<HTMLTextAreaElement>\n  ) => {\n    setValues((prevInput) => ({\n      ...prevInput,\n      [e.target.name]: e.target.value,\n    }));\n  };\n  return (\n    <form onSubmit={handleSubmit}>\n      <Input\n        value={values.name}\n        onChange={handleChange}\n        id=\"name\"\n        name=\"name\"\n        label=\"Your Name\"\n        placeholder=\"John Doe\"\n        error={!!errors.name}\n        errorMessage={!!errors.name ? errors.name : \"\"}\n      />\n      <Input\n        value={values.email}\n        onChange={handleChange}\n        id=\"email\"\n        name=\"email\"\n        label=\"Your Email\"\n        placeholder=\"you@example.com\"\n        error={!!errors.email}\n        errorMessage={!!errors.email ? errors.email : \"\"}\n      />\n      <TextArea\n        value={values.message}\n        onChange={handleChange}\n        id=\"message\"\n        name=\"message\"\n        label=\"Your Message\"\n        placeholder=\"Your message here...\"\n        error={!!errors.message}\n        errorMessage={!!errors.message ? errors.message : \"\"}\n      />\n      <button\n        className=\"mt-4 w-full rounded-md bg-blue-600 py-3 px-5 text-lg text-white outline-none hover:bg-blue-800 disabled:cursor-not-allowed disabled:bg-opacity-60\"\n        type=\"submit\"\n        disabled={loading}\n      >\n        {loading !== true ? (\n          \"SUBMIT\"\n        ) : (\n          <div className=\"flex h-full w-full items-center justify-center \">\n            <RiLoader5Fill className=\"h-8 w-8 animate-spin\" />\n          </div>\n        )}\n      </button>\n      <p className=\"mt-5 text-green-500 dark:text-green-500\">\n        {success !== false ? (\n          messageState\n        ) : (\n          <span className=\"text-red-500 dark:text-red-500\">{messageState}</span>\n        )}\n      </p>\n    </form>\n  );\n};\n```\n\n----------\n\n## **Step 7 — Call the Form component on our index.**\n\nFinally, we call the Form component to our index page\n\n```typescript\n// pages/index.tsx\nimport type { NextPage } from \"next\";\nimport Head from \"next/head\";\nimport { Form } from \"../components\";\nconst Home: NextPage = () => {\n  return (\n    <div>\n      <Head>\n        <title>Contact form with Sendgrid</title>\n        <meta name=\"description\" content=\"Generated by create next app\" />\n        <link rel=\"icon\" href=\"/favicon.ico\" />\n      </Head>\n      <main className=\"h-screen\">\n        <h1 className=\"text-6xl text-center my-10\">\n          Contact form with <span className=\"text-blue-500\">SendGrid</span>\n        </h1>\n        <div className=\"container mx-auto my-10 max-w-7xl cpx-4 sm:px-6 lg:px-60\">\n          <Form />\n        </div>\n      </main>\n    </div>\n  );\n};\nexport default Home;\n\n```\n\n----------\n\n## **Step 8 — We test that everything works.**\n\n![step 8.png](https://res.cloudinary.com/joseschzslts/image/upload/v1657888249/step_8_2607b53276.png)\n\n----------\n\n![step 8-2.png](https://res.cloudinary.com/joseschzslts/image/upload/v1657888248/step_8_2_6aa1a7c10e.png)\n\n----------\n\n![step 8-3.png](https://res.cloudinary.com/joseschzslts/image/upload/v1657771416/step_8_3_3b3ab2e46b.png)\n\n----------\n\n**GitHub repo:**\n\n[SALT0S/nextjs-sendgrid-form: NextJS + SendGrid Form Contact (github.com)](https://github.com/SALT0S/nextjs-sendgrid-form)"
    }
  ]
}
